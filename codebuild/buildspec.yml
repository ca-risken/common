version: 0.2

env:
  variables:
    IMAGE_DB: "middleware/db"
    IMAGE_QUEUE: "middleware/queue"
  parameter-store:
    GITHUB_USER: "/build/GITHUB_USER"
    GITHUB_TOKEN: "/build/GITHUB_TOKEN"

phases:
  install:
    runtime-versions:
      golang: 1.14
    commands:
      - echo "machine github.com" > ~/.netrc
      - echo "login ${GITHUB_USER}" >> ~/.netrc
      - echo "password ${GITHUB_TOKEN}" >> ~/.netrc
  pre_build:
    commands:
      - echo Setting environment variables
      - PKG=${CODEBUILD_SRC_DIR}/pkg
      - MIDDLEWARE=${CODEBUILD_SRC_DIR}/middleware
      - BUILD_OPT="--no-cache --pull"
      - TAG=v0.0.${CODEBUILD_BUILD_NUMBER}
      - AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
      - REGISTORY=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com

      - echo Testing the Go packages...
      - cd ${PKG}/database/sql  && go test ./...
      - cd ${PKG}/logging       && go test ./...
      - cd ${PKG}/portscan      && go test ./...
      - cd ${PKG}/sqs           && go test ./...
      - cd ${PKG}/xray          && go test ./...

      - echo Logging in to Amazon ECR...
      - $(aws ecr get-login --no-include-email --region ${AWS_DEFAULT_REGION})
  build:
    commands:
      - echo Build gateway started on `date`
      - echo Pushing the Docker images...
      - cd ${MIDDLEWARE}/db    && docker build ${BUILD_OPT} -t ${IMAGE_DB}:${TAG} .
      - cd ${MIDDLEWARE}/queue && docker build ${BUILD_OPT} -t ${IMAGE_QUEUE}:${TAG} .

      - echo Tagging the images...
      # tag the specific version
      - docker tag ${IMAGE_DB}:${TAG}     ${REGISTORY}/${IMAGE_DB}:${TAG}
      - docker tag ${IMAGE_QUEUE}:${TAG}  ${REGISTORY}/${IMAGE_QUEUE}:${TAG}

      # update latest version 
      - docker tag ${IMAGE_DB}:${TAG}     ${REGISTORY}/${IMAGE_DB}:latest
      - docker tag ${IMAGE_QUEUE}:${TAG}  ${REGISTORY}/${IMAGE_QUEUE}:latest

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...

      # specific version
      - docker push ${REGISTORY}/${IMAGE_DB}:${TAG}
      - docker push ${REGISTORY}/${IMAGE_QUEUE}:${TAG}

      # latest version
      - docker push ${REGISTORY}/${IMAGE_DB}:latest
      - docker push ${REGISTORY}/${IMAGE_QUEUE}:latest
