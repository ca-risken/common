version: 0.2

env:
  variables:
    IMAGE_PREFIX: "risken-middleware"
  parameter-store:
    GITHUB_USER: "/build/GITHUB_USER"
    GITHUB_TOKEN: "/build/GITHUB_TOKEN"
    DOCKER_USER: "/build/DOCKER_USER"
    DOCKER_TOKEN: "/build/DOCKER_TOKEN"

phases:
  install:
    commands:
      - echo "machine github.com" > ~/.netrc
      - echo "login ${GITHUB_USER}" >> ~/.netrc
      - echo "password ${GITHUB_TOKEN}" >> ~/.netrc
  pre_build:
    commands:
      - echo Setting environment variables
      - PKG=${CODEBUILD_SRC_DIR}/pkg
      - MIDDLEWARE=${CODEBUILD_SRC_DIR}/middleware
      - BUILD_OPT="--no-cache --pull"
      - TAG=$(git rev-parse --short HEAD)_${OS}_${ARCH}
      - AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
      - REGISTRY=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
      - AWS_XRAY_SDK_DISABLED=TRUE
      - sh codebuild/multi-arch/install-go.sh
      - go version

      - echo Logging in to Amazon ECR...
      - aws --version
      - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REGISTRY}

      - |
        #!/bin/bash
        if [[ -n "${DOCKER_USER}" ]] && [[ -n "${DOCKER_TOKEN}" ]]; then
          echo 'Logging in to Docker Hub...'
          echo "$DOCKER_TOKEN" | docker login -u $DOCKER_USER --password-stdin
        fi

      - echo Testing go package
      - cd ${PKG}/database/sql && go test ./...
      - cd ${PKG}/logging      && go test ./...
      - cd ${PKG}/portscan     && go test ./...
      - cd ${PKG}/sqs          && go test ./...
      - cd ${PKG}/xray         && go test ./...
  build:
    commands:
      - echo Build middleware started on `date`
      - echo building the Docker images...
      - cd ${MIDDLEWARE} && make build-ci -j BUILD_OPT="${BUILD_OPT}" IMAGE_PREFIX=${IMAGE_PREFIX} IMAGE_TAG=${TAG} IMAGE_REGISTRY=${REGISTRY}

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - cd ${MIDDLEWARE} && make push-image -j IMAGE_PREFIX=${IMAGE_PREFIX} IMAGE_TAG=${TAG} IMAGE_REGISTRY=${REGISTRY}
      - cd ${MIDDLEWARE} && make push-image -j IMAGE_PREFIX=${IMAGE_PREFIX} IMAGE_TAG=latest IMAGE_REGISTRY=${REGISTRY}
